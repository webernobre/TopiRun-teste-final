/**
 * @author walmeida
 */
public class AccountFilter {

    virtual
    public List<Account> filterByChangedCpf ( List<Account> newAccounts
                                            , Map<Id,Account> oldAccounts ) {

        List<Account> filteredAccounts = new List<Account> ();
        for ( Account account : newAccounts ) {

            if ( String.isEmpty(account.Cpf__c) ) {
            continue;
            } 

            if ( oldAccounts == null || oldAccounts.isEmpty() ) {
                filteredAccounts.add(account);
                continue;
            }

            if ( account.Cpf__c == oldAccounts.get(account.Id).Cpf__c ) {
                continue;
            }

            filteredAccounts.add( account );

        }

        return filteredAccounts;
    }
    
    virtual
    public List<Account> filterByChangedCnpj( List<Account> newAccounts
                                            , Map<Id,Account> oldAccounts ) {

        List<Account> filteredAccounts = new List<Account> ();

        for ( Account account : newAccounts ) {

            if ( String.isEmpty(account.Cnpj__c) ) {
                continue;
            } 

            if ( oldAccounts == null || oldAccounts.isEmpty() ) {
                filteredAccounts.add(account);
                continue;
            }

            if ( account.Cnpj__c == oldAccounts.get(account.Id).Cnpj__c ) {
                continue;
            }

            filteredAccounts.add( account );
        }
        return filteredAccounts;
    }


    virtual
    public List<Account> filterByChangedBillingAddressPostalCode( List<Account> newAccounts
                                                                , Map<Id,Account> oldAccounts ) {
        
        List<Account> filteredAccounts = new List<Account> ();
        for ( Account account : newAccounts ) {
            
            if ( String.isEmpty(account.BillingPostalCode) ) {
                continue;
            }

            if ( oldAccounts == null || oldAccounts.isEmpty() ) {

                filteredAccounts.add(account);
                continue;
            }

            if ( account.BillingPostalCode == oldAccounts.get(account.Id).BillingPostalCode ) {
                continue;
            }

            filteredAccounts.add(account);

        }

        return filteredAccounts;

    }

    virtual
    public List<Account> filterByChangedShippingAddressPostalCode( List<Account> newAccounts
                                                                , Map<Id,Account> oldAccounts ) {
        
        List<Account> filteredAccounts = new List<Account> ();
        for ( Account account : newAccounts ) {
            
            if ( String.isEmpty(account.ShippingPostalCode) ) {
                continue;
            }

            if ( oldAccounts == null || oldAccounts.isEmpty() ) {

                filteredAccounts.add(account);
                continue;
            }

            if ( account.ShippingPostalCode == oldAccounts.get(account.Id).ShippingPostalCode ) {
                continue;
            }

            filteredAccounts.add(account);

        }

        return filteredAccounts;

    }

    virtual
    public List<Account> filterByChangedAddress( List<Account> newAccounts
                                                                , Map<Id,Account> oldAccounts ) {
        CheckChangedAddress checkAddress = new CheckChangedAddress();
        List<Account> filteredAccounts = new List<Account> ();
        for ( Account account : newAccounts ) {

            if ( oldAccounts == null || oldAccounts.isEmpty() ) {

                filteredAccounts.add(account);
                continue;
            }

            if ( checkAddress.checkChangedShippingAddress(account, oldAccounts.get(account.Id)) ) {
                filteredAccounts.add(account);
                continue;
            }
            if ( checkAddress.checkChangedBillingAddress(account, oldAccounts.get(account.Id) ) ) {
                filteredAccounts.add(account);
                continue;
            }
        }
        return filteredAccounts; 

    }
}